{
  "test_table_snippets": {
    "prefix": "tta",
    "body": [
      "type args struct{",
      "}",
      "type want struct{",
      "}",
      "tests := []struct{",
      "  name string",
      "  args args",
      "  want want",
      "}{",
      "}",
      "for _,tt := range tests{",
      "  tt := tt",
      "  t.Run(tt.name,func(t *testing.T){",
      "  })",
      "}"
    ]
  },
  "test_function": {
    "prefix": "tf",
    "body": [
      "func Test$1(t *testing.T){",
      "t.Parallel()",
      "type args struct{",
      "}",
      "type want struct{",
      "   result $2",
      "}",
      "tests := []struct{",
      "  name string",
      "  args args",
      "  want want",
      "}{",
      "}",
      "for _,tt := range tests{",
      "  tt := tt",
      "  t.Run(tt.name,func(t *testing.T){",
      "     t.Parallel()",
      "     got := $1()",
      "     assertx.Equal(t,tt.want.result,got)",
      "  })",
      "}",
      "}"
    ]
  },
  "test_function_with_error": {
    "prefix": "tfe",
    "body": [
      "func Test$1(t *testing.T){",
      "t.Parallel()",
      "type args struct{",
      "}",
      "type want struct{",
      "   result $2",
      "   err error",
      "}",
      "tests := []struct{",
      "  name string",
      "  args args",
      "  want want",
      "}{",
      "}",
      "for _,tt := range tests{",
      "  tt := tt",
      "  t.Run(tt.name,func(t *testing.T){",
      "     t.Parallel()",
      "     got,err := $1()",
      "     asserterr.Equal(t,tt.want.err,err)",
      "     assertx.Equal(t,tt.want.result,got)",
      "  })",
      "}",
      "}"
    ]
  },
  "test_service_with_error": {
    "prefix": "tse",
    "body": [
      "func Test$1_$2(t *testing.T){",
      "t.Parallel()",
      "type args struct{",
      "testFixturePaths     []string",
      "}",
      "type want struct{",
      "   result $3",
      "   err error",
      "}",
      "tests := []struct{",
      "  name string",
      "  args args",
      "  want want",
      "}{",
      "}",
      "for _,tt := range tests{",
      "  tt := tt",
      "  t.Run(tt.name,func(t *testing.T){",
      "     t.Parallel()",
      "     testrun.RunInDomainTest(t, testrun.DefaultEnvironmentConfig(), func(service $4.$1,db *sql.DB) {",
      "       testrun.MustLoadTestFixture(db, testfixtures.Paths(tt.args.testFixturePaths...))",
      "       got,err := service.$2()",
      "       asserterr.Equal(t,tt.want.err,err)",
      "       assertx.Equal(t,tt.want.result,got)",
      "     })",
      "  })",
      "}",
      "}"
    ]
  },
  "test_function_presenter": {
    "prefix": "tfp",
    "body": [
      "func Test$1_$2(t *testing.T){",
      "t.Parallel()",
      "type args struct{",
      "req     *ogenapi.$3",
      "}",
      "type want struct{",
      "err error",
      "res *ogenapi.$4",
      "}",
      "tests := []struct{",
      "  name string",
      "  args args",
      "  want want",
      "}{",
      "  {",
      "    name:\"\",",
      "    args:args{",
      "    },",
      "    want:want{",
      "      err:nil,",
      "      res:nil,",
      "    },",
      "  },",
      "}",
      "for _,tt := range tests{",
      "  tt := tt",
      "  t.Run(tt.name,func(t *testing.T){",
      "  t.Parallel()",
      "  testrun.InvokeRest(t, func(rc *testrun.RunContext) {",
      "  ctx := context.Background()",
      "  testrun.MustLoadTestFixture(rc.DB, testfixtures.Paths(filepath.Join(\"testdata\", tt.name)))",
      "  res, err := rc.Client.$2(ctx,tt.args.req)",
      "  assertx.Equal(t,tt.want.err,err)",
      "  assertx.Equal(t,tt.want.res,res)",
      "  })",
      "  })",
      "}",
      "}"
    ]
  }
}
